{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAOP,GAAP,mBAAsBO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SApBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,0DAC8CC,UAAUH,GADxD,sDAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGKA,EAAKC,OAHV,uBAGVC,EAHU,EAGVA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAG1Ca,QAAQC,IAAIR,GAXM,kBAYXA,GAZW,4CAAH,sDCGNS,EAAc,SAAC,GAAsB,IAArBN,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OAFAa,QAAQC,IAAIL,EAAIC,EAAOV,GAGnB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,kCAAMA,EAAN,WCLCS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KA4BtC,OAtBAC,qBAAU,WACN1B,EAAQC,GACP0B,MAAM,SAAAC,GAGCH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAMtB,CAACtB,IASGuB,EDtBwBK,CAAa5B,GAAhCa,EAJuB,EAI5BN,KAAae,EAJe,EAIfA,QASpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDlB,IAInDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAaYL,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEC1BkB,EAtCM,WAAM,MAIa3C,mBAAS,CAAC,cAJvB,mBAIhB4C,EAJgB,KAIJ7C,EAJI,KAYvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAKQ6C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MC1BlC+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a3b81836.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        // console.log(e.target.value);\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2){\n            setCategories(cats =>  [ inputValue, ...cats]);\n            setInputValue('');\n        }\n\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGif = async( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${ encodeURI(category) }&api_key=b3UZpcc5PBw8Jz4G1P3OhKcoFNBTd314`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    console.log(gifs);\n    return gifs;\n}","import React from 'react'\n\n// export const GifGridItem = (img) => {\nexport const GifGridItem = ({id, title, url}) => {\n\n    console.log(id, title, url);\n\n    return (\n        <div className=\"card animate__animated animate__wobble\">\n            <img src={url} alt={title}/>\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React, {useEffect, useState} from 'react'\nimport { getGif } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    // const [images, setImages] = useState([]);\n\n    const {data:images, loading} = useFetchGifs(category);\n    \n    // useEffect(() => {\n    //     getGif( category )\n    //     .then( setImages ); //si solo se pone el metodo recibe como parametro la lista de gifs\n    // }, [ category ])\n\n\n    \n    return (\n        <>\n            <h3 className=\"animate__animated animate__wobble\">{ category }</h3>\n\n            {/* {loading ? 'Cargando...' : 'Data cargada'} */}\n\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n            <div className=\"card-grid\">            \n                    {\n                        // images.map( ({ id, title }) => (\n                        //     <li key={id}> { title } </li>\n                        // ))\n\n                        // images.map( (img) => (\n                        //     <GifGridItem \n                        //         key={img.id}\n                        //         img={img} \n                        //     />\n                        // ))\n\n                        images.map( (img) => (\n                            <GifGridItem \n                                key={img.id}\n                                {...img} \n                            />\n                        ))\n                    }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGif } from \"../helpers/getGifs\"\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })    \n\n    useEffect(() => {\n        getGif( category )\n        .then( imgs => {\n\n            //setTimeout(() => {\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n                \n            //}, 3000);\n\n        } ); \n    }, [category])\n\n    // setTimeout(()=> {\n    //     setState({\n    //         data: [1,2,3,4,5,6,7],\n    //         loading: false\n    //     }, 3000)\n    // })\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    // const categories = ['One Punch','Samurai X','Dragin Ball']\n    // const [categories, setCategories] = useState(['One Punch','Samurai X','Dragin Ball']);\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = () => {\n    //     // setCategories(['HunterXHunter', ...categories])\n    //     // setCategories( cats =>  [ ...cats, 'HunterXHunter'])\n    //     setCategories([... categories, 'HunterXHunter'])\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n\n            {/* <button onClick={ handleAdd }>Agregar</button> */}\n\n            <ol>\n                { \n                    // categories.map(category => {\n                    //     return <li key={ category }> { category } </li>\n                    // }) \n                    categories.map(category => (\n                        <GifGrid \n                            key={ category }\n                            category={ category }\n                        />\n                    )) \n                    \n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}